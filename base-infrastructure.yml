---
AWSTemplateFormatVersion: '2010-09-09'
Description: VPC and autoscaling infrastructure for gameday application
Mappings:
  AWSRegionToAMI:
    ap-northeast-1:
      AMIID: ami-1a15c77b
    ap-southeast-1:
      AMIID: ami-7243e611
    ap-southeast-2:
      AMIID: ami-55d4e436
    eu-central-1:
      AMIID: ami-0044b96f
    eu-west-1:
      AMIID: ami-d41d58a7
    us-east-1:
      AMIID: ami-c481fad3
    us-west-1:
      AMIID: ami-de347abe
    us-west-2:
      AMIID: ami-b04e92d0
Outputs:
  EC2URL:
    Description: URL of EC2 Instance
    Value: !Sub http://${ElasticIPAddr}
Parameters:
  InstanceType:
    AllowedValues:
    - t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: WebServer EC2 instance type
    Type: String
  SSHLocation:
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  APIToken:
    Description: API Token to be used as a parameter for running the server
    Type: String
  ScoreEndpoint:
    Description: Score Endpoint to be used as a parameter for running the server
    Default: http://alb-2072016477.us-west-2.elb.amazonaws.com/score
    Type: String
Resources:
  EC2Instance:
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegionToAMI
        - !Ref AWS::Region
        - AMIID
      InstanceType: !Ref InstanceType
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: '0'
        GroupSet:
        - !Ref InstanceSecurityGroup
        SubnetId: !Ref PublicSubnet1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum -y install wget
            pip install boto3 flask
            wget https://s3-us-west-2.amazonaws.com/gameday-resources/server.py
            chmod +x server.py
            python server.py '${APIToken}' '${ScoreEndpoint}'
    Type: AWS::EC2::Instance
  GatewayToInternet:
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Type: AWS::EC2::VPCGatewayAttachment
  InstanceSecurityGroup:
    Properties:
      GroupDescription: Web Instance Security Group
      SecurityGroupIngress:
      - CidrIp: !Ref SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      - CidrIp: 0.0.0.0/0
        FromPort: '80'
        IpProtocol: tcp
        ToPort: '80'
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  PublicRoute:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
  PublicRouteTable:
    Properties:
      VpcId: !Ref VPC
    Type: AWS::EC2::RouteTable
  PublicSubnet1:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.0.128/28
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet
  PublicSubnet1RouteTableAssociation:
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  PublicSubnet2:
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs: ''
      CidrBlock: 10.0.128.0/24
      VpcId: !Ref VPC
    Type: AWS::EC2::Subnet
  PublicSubnet1NACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NACL
  PublicSubnet2NACL:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NACL
  IstanceSecurityGroup:
    Properties:
      GroupDescription: Web Istance Security Group
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: '3306'
        IpProtocol: tcp
        ToPort: '3306'
      - CidrIp: 172.13.44.2/32
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'
      VpcId: !Ref VPC
    Type: AWS::EC2::SecurityGroup
  VPC:
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
      - Key: Name
        Value: Production VPC
    Type: AWS::EC2::VPC
  NACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
  NACLEntry1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL
      RuleNumber: '100'
      Protocol: "6"
      RuleAction: deny
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '22'
        To: '22'
  NACLEntry2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL
      RuleNumber: '200'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
  NACLEntry3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref NACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
  ElasticIPAddr:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance
      Domain: vpc
    DependsOn: InternetGateway
